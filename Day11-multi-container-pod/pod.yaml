# hint: 
# init-containers	:    run before the actual app in this pod, in order to do certain task 	
#			after init container complete, so that actual app started
# sidecar-container	:    run and ride along with actual app container, provide certain input or take certain output, like logging agent

apiVersion: v1
kind: Pod
metadata:
  name: myapp
  labels:
    name: myapp-pod
spec:
  containers:
  - name: myapp-container
    image: busybox:1.28
    command: ['sh', '-c', 'echo the app is running && sleep 36']
    env:
    - name: FIRSTNAME
      value: "hzlnqodrey"

  # add sidecar (+ shared volume and the main container writing into the shared log)
  - name: log-sidecar
    image: busybox:1.28
    # keep following the shared log file (if present). If not present yet, sleep+retry.
    command:
      - sh
      - -c
      - |
        while true; do
          if [ -f /shared-logs/myapp.log ]; then
            tail -n +1 -F /shared-logs/myapp.log
          else
            echo "sidecar: waiting for /shared-logs/myapp.log"
            sleep 2
          fi
        done
    volumeMounts:
    - name: shared-logs
      mountPath: /shared-logs


  initContainers:
  - name: init-myservice
    image: busybox:1.28
    command: ['sh' , '-c']
    args: ['until nslookup myservice.default.svc.cluster.local; do echo waiting for service to be up;sleep 2;done']
   - name: init-mydb
    image: busybox:1.28
    command: ['sh', '-c']
    args: ['until nslookup mydb.default.svc.cluster.local; do echo waiting for mydb; sleep 2; done']
